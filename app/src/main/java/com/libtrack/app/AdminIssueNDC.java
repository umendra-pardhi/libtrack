package com.libtrack.app;

import static com.gkemon.XMLtoPDF.PdfGenerator.*;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.textfield.TextInputLayout;
import com.gkemon.XMLtoPDF.PdfGenerator;
import com.gkemon.XMLtoPDF.PdfGeneratorListener;
import com.gkemon.XMLtoPDF.model.FailureResponse;
import com.gkemon.XMLtoPDF.model.SuccessResponse;
import com.google.firebase.FirebaseApp;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;


public class AdminIssueNDC extends AppCompatActivity {

    private FirebaseFirestore db;
    private ProgressDialog p;
    private boolean res1, res2;
    private User U = new User();
    private Book B1 = new Book();

    private LinearLayout layoutndc,layoutpreviewndc;
    private TextInputLayout editCardNo;
    private Button buttonPrintNDC,buttonCreateNDC;
    private TextView textcert;
    private TextView date;
    private PdfGenerator.XmlToPDFLifecycleObserver xmlToPDFLifecycleObserver;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_admin_issue_ndc);

        FirebaseApp.initializeApp(this);
        db=FirebaseFirestore.getInstance();
        p = new ProgressDialog(this);

        buttonCreateNDC=(Button) findViewById(R.id.buttonCreateNDC);
        buttonPrintNDC=(Button) findViewById(R.id.buttonPrintNDC);
        editCardNo=(TextInputLayout) findViewById(R.id.editCardNo);
        layoutndc=(LinearLayout) findViewById(R.id.layoutndc);
        layoutpreviewndc=(LinearLayout) findViewById(R.id.layoutpreviewndc);
        textcert =(TextView) findViewById(R.id.textcert);
        date =(TextView) findViewById(R.id.date);

        xmlToPDFLifecycleObserver = new PdfGenerator.XmlToPDFLifecycleObserver(this);
        getLifecycle().addObserver(xmlToPDFLifecycleObserver);

        layoutpreviewndc.setVisibility(View.GONE);

//create NDC
        buttonCreateNDC.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (verifyCard()) {
                    return;
                }
               getUser();


            }
        });
//print NDC
        buttonPrintNDC.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                generateNDCPdf();
            }
        });

    }

    //crete certificate

    public void createCertificate(){
        layoutpreviewndc.setVisibility(View.VISIBLE);
        String certdata="This is to certify that Mr./Ms. "+U.getName()+", Enrollment No. "+U.getEnroll()+"\n" +
                "Library Member ID "+U.getCard()+" Student of ............................................ Department\n" +
                "has returned all the books and non-books borrowed from the Library. He/she owes\n" +
                "no due to the Library.";
        textcert.setText(certdata);
        LocalDate date1 = null;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            date1 = LocalDate.now();
        DateTimeFormatter formatter = null;
            formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            String formattedDate = date1.format(formatter);
            date.setText(formattedDate);
        }

    }

//generate pdf
    public void generateNDCPdf(){
        getBuilder()
                .setContext(AdminIssueNDC.this)
                .fromViewIDSource()
                .fromViewID(AdminIssueNDC.this, R.id.layoutndc)
                .setFileName("Library No Due Certificate")
                .actionAfterPDFGeneration(PdfGenerator.ActionAfterPDFGeneration.SHARE)
                .savePDFSharedStorage(xmlToPDFLifecycleObserver)
                .build(new PdfGeneratorListener() {
                    @Override
                    public void onFailure(FailureResponse failureResponse) {
                        super.onFailure(failureResponse);
                        /* If pdf is not generated by an error then you will findout the reason behind it
                         * from this FailureResponse. */
                    }
                    @Override
                    public void onStartPDFGeneration() {
                        /*When PDF generation begins to start*/
                    }

                    @Override
                    public void onFinishPDFGeneration() {
                        /*When PDF generation is finished*/
                    }

                    @Override
                    public void showLog(String log) {
                        super.showLog(log);
                        /*It shows logs of events inside the pdf generation process*/
                    }

                    @Override
                    public void onSuccess(SuccessResponse response) {
                        super.onSuccess(response);
                        /* If PDF is generated successfully then you will find SuccessResponse
                         * which holds the PdfDocument,File and path (where generated pdf is stored)*/

                    }
                });

    }
//fetch user data
    private boolean getUser() {
        db.collection("User").whereEqualTo("card", Integer.parseInt(editCardNo.getEditText().getText().toString().trim())).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
            @Override
            public void onComplete(@NonNull Task<QuerySnapshot> task) {

                if (task.isSuccessful()) {
                    if (task.getResult().size() == 1) {
                        res1 = true;
                        for (QueryDocumentSnapshot doc : task.getResult())
                            U = doc.toObject(User.class);
                        Toast.makeText(AdminIssueNDC.this, "User !"+U.getName(), Toast.LENGTH_SHORT).show();

                        createCertificate();
                    } else {
                        res1 = false;
                        p.cancel();
                        Toast.makeText(AdminIssueNDC.this, "No Such User !", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    res1 = false;
                    p.cancel();
                    Toast.makeText(AdminIssueNDC.this, "Try Again !", Toast.LENGTH_SHORT).show();
                }
            }
        });

        return res1;
    }


    private boolean verifyCard() {
        String t = editCardNo.getEditText().getText().toString().trim();
        if (t.isEmpty()) {
            editCardNo.setErrorEnabled(true);
            editCardNo.setError("Card No. Required");
            return true;
        } else {
            editCardNo.setErrorEnabled(false);
            return false;
        }
    }
}